# Toby Hammond
# second.ac
# continuously requests values, then after user inputs a negative number 
# returns the second-greates value entered. This program only stores the 
# greatest and second-greatest values and forgets the rest

# r1: input
# r2: second-greatest input
# r3: greatest input
# r4: multi-purpose

                  # init variables
                  lli r1 0
                  lli r2 0
                  lli r3 0
                  in r1
                  # when user inputs a negative number
while:            blt r1 &break
                  sub r4 r1 r3
                  # 3 conditions: 
                  # greatest: input is greater than any previous one 
                  #     -> greatest = input, second-greatest = greatest
                  # second_greatest: input is either equal to greatest or 
                  # greater than second-greatest 
                  #     -> second-greatest = input
                  bgt r4 &greatest
                  # tests for equality to current second-greatest value
                  beq r4 &sec_greatest
                  sub r4 r1 r2
                  bgt r4 &sec_greatest
                  beq r0 &end_while
                  # shift
greatest:         add r2 r0 r3
                  add r3 r0 r1
                  beq r0 &end_while
sec_greatest:     add r2 r0 r1
end_while:        in r1
                  beq r0 &while
                  # very handily, r2 will be 0 if user has inputted only one
                  # positive integer, and our second highest if they've
                  # inputted more.
break:            out r2
# Toby Hammond
# list.ac
# Linked-list of integers. User can insert to the front or back of the list, 
# as well as search for a value.

# Activation record for main:
# 0. Node* root

              # Stack setup
              lli r6 0x00
              lui r6 0x80
              addi r7 r6 1

              # Node* root = nullptr
              sw r0 r6 0

whilemain:    in r1

              lli r2 1
              sub r2 r2 r1
              beq r2 &case1
              lli r2 2
              sub r2 r2 r1
              beq r2 &case2
              lli r2 3
              sub r2 r2 r1
              beq r2 &case3
              lli r2 4
              sub r2 r2 r1
              beq r2 &case4
              beq r0 &whilemain

case1:        in r2
              lw r1 r6 0
              sw r1 r7 1
              sw r2 r7 2

              lli r1 &addFront
              lui r1 &addFront
              jalr r1 r5

              # root = addFront()
              sw r4 r6 0
              beq r0 &whilemain

case2:        in r2
              lw r1 r6 0
              sw r1 r7 1
              sw r2 r7 2

              lli r1 &addEnd
              lui r1 &addEnd
              jalr r1 r5

              # root = addEnd()
              sw r4 r6 0
              beq r0 &whilemain

case3:        in r2
              lw r1 r6 0
              sw r1 r7 1
              sw r2 r7 2

              lli r1 &search
              lui r1 &search
              jalr r1 r5

              out r4
              beq r0 &whilemain

case4:        .halt

# Activation record - addFront:
# 0. prev. fp
# 1. Node* head
# 2. int val


addFront:     sw r6 r7 0
              addi r6 r7 0
              addi r7 r7 3

              lli r2 &heapPtr
              lui r2 &heapPtr

              # r1 = new data (&heapPtr)
              lw r1 r2 0
              # increment *heapPtr and store new value in &heapPtr
              addi r3 r1 2
              sw r3 r2 0

              # ins->data = val
              lw r3 r6 2
              sw r3 r1 0
              # ins->next = nullptr
              sw r0 r1 1

              lw r3 r6 1
              beq r3 &endfront
              sw r3 r1 1
endfront:     addi r4 r1 0
              # stack cleanup
              addi r7 r6 0
              lw r6 r7 0
              jalr r5 r0

# Activation record - addEnd:
# 0. prev. fp
# 1. Node* head
# 2. int val
# 3. Node* ins
# 4. Node* tmp

addEnd:       sw r6 r7 0
              addi r6 r7 0
              addi r7 r7 5

              lli r2 &heapPtr
              lui r2 &heapPtr

              # r1 = new data (&heapPtr) (r1 = ins)
              lw r1 r2 0
              # increment *heapPtr and store new value in &heapPtr
              addi r3 r1 2
              sw r3 r2 0

              # ins->data = val
              lw r2 r6 2
              sw r2 r1 0
              # ins->next = nullptr
              sw r0 r1 1
              # store variable
              sw r1 r6 3

              # r1 = tmp = head (right now)
              lw r1 r6 1
              # if head != nullptr skip to else/while
              bne r1 &whileend
              # r2 = ins
              lw r2 r6 3
              # store r2 in head
              sw r2 r6 1
              beq r0 &endend
              # r2 = tmp->next
whileend:     lw r2 r1 1
              beq r2 &breakend
              # increment r1 to next node
              lw r1 r1 1
              beq r0 &whileend
breakend:     lw r2 r6 3
              # tmp->next (which is last valid node when loop breaks) = ins
              sw r2 r1 1
              # return head
endend:       lw r4 r6 1

              addi r7 r6 0
              lw r6 r7 0
              jalr r5 r0

# Activation record - Search:
# 0. prev. fp
# 1. Node* head
# 2. int val

search:       sw r6 r7 0
              addi r6 r7 0
              addi r7 r7 3

              # r1 = head
              lw r1 r6 1
              # r2 = counter
              addi r2 r0 1
              # r3 = val
              lw r3 r6 2
whilesearch:  beq r1 &breaksearch
              lw r4 r1 0
              sub r4 r4 r3
              beq r4 &breaksearch
              lw r1 r1 1
              addi r2 r2 1
              beq r0 &whilesearch
breaksearch:  beq r1 &elsesearch
              addi r4 r2 0
              beq r0 &endsearch
elsesearch:   lli r4 0
              # stack cleanup
endsearch:    addi r7 r6 0
              lw r6 r7 0
              jalr r5 r0


# heap
heapPtr:      .fill &heap
heap:         .fill 0